/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Booth as PrismaBooth,
  Exhibitor as PrismaExhibitor,
  Event as PrismaEvent,
} from "@prisma/client";

export class BoothServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BoothCountArgs, "select">): Promise<number> {
    return this.prisma.booth.count(args);
  }

  async booths(args: Prisma.BoothFindManyArgs): Promise<PrismaBooth[]> {
    return this.prisma.booth.findMany(args);
  }
  async booth(args: Prisma.BoothFindUniqueArgs): Promise<PrismaBooth | null> {
    return this.prisma.booth.findUnique(args);
  }
  async createBooth(args: Prisma.BoothCreateArgs): Promise<PrismaBooth> {
    return this.prisma.booth.create(args);
  }
  async updateBooth(args: Prisma.BoothUpdateArgs): Promise<PrismaBooth> {
    return this.prisma.booth.update(args);
  }
  async deleteBooth(args: Prisma.BoothDeleteArgs): Promise<PrismaBooth> {
    return this.prisma.booth.delete(args);
  }

  async findExhibitors(
    parentId: string,
    args: Prisma.ExhibitorFindManyArgs
  ): Promise<PrismaExhibitor[]> {
    return this.prisma.booth
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .exhibitors(args);
  }

  async getEvent(parentId: string): Promise<PrismaEvent | null> {
    return this.prisma.booth
      .findUnique({
        where: { id: parentId },
      })
      .event();
  }

  async getExhibitor(parentId: string): Promise<PrismaExhibitor | null> {
    return this.prisma.booth
      .findUnique({
        where: { id: parentId },
      })
      .exhibitor();
  }
}
