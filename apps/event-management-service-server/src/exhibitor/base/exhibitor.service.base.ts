/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Exhibitor as PrismaExhibitor,
  Booth as PrismaBooth,
} from "@prisma/client";

export class ExhibitorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExhibitorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.exhibitor.count(args);
  }

  async exhibitors(
    args: Prisma.ExhibitorFindManyArgs
  ): Promise<PrismaExhibitor[]> {
    return this.prisma.exhibitor.findMany(args);
  }
  async exhibitor(
    args: Prisma.ExhibitorFindUniqueArgs
  ): Promise<PrismaExhibitor | null> {
    return this.prisma.exhibitor.findUnique(args);
  }
  async createExhibitor(
    args: Prisma.ExhibitorCreateArgs
  ): Promise<PrismaExhibitor> {
    return this.prisma.exhibitor.create(args);
  }
  async updateExhibitor(
    args: Prisma.ExhibitorUpdateArgs
  ): Promise<PrismaExhibitor> {
    return this.prisma.exhibitor.update(args);
  }
  async deleteExhibitor(
    args: Prisma.ExhibitorDeleteArgs
  ): Promise<PrismaExhibitor> {
    return this.prisma.exhibitor.delete(args);
  }

  async findBooths(
    parentId: string,
    args: Prisma.BoothFindManyArgs
  ): Promise<PrismaBooth[]> {
    return this.prisma.exhibitor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .booths(args);
  }

  async getBooth(parentId: string): Promise<PrismaBooth | null> {
    return this.prisma.exhibitor
      .findUnique({
        where: { id: parentId },
      })
      .booth();
  }
}
