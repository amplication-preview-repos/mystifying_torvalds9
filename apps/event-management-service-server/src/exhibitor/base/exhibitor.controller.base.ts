/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ExhibitorService } from "../exhibitor.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ExhibitorCreateInput } from "./ExhibitorCreateInput";
import { Exhibitor } from "./Exhibitor";
import { ExhibitorFindManyArgs } from "./ExhibitorFindManyArgs";
import { ExhibitorWhereUniqueInput } from "./ExhibitorWhereUniqueInput";
import { ExhibitorUpdateInput } from "./ExhibitorUpdateInput";
import { BoothFindManyArgs } from "../../booth/base/BoothFindManyArgs";
import { Booth } from "../../booth/base/Booth";
import { BoothWhereUniqueInput } from "../../booth/base/BoothWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ExhibitorControllerBase {
  constructor(
    protected readonly service: ExhibitorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Exhibitor })
  @nestAccessControl.UseRoles({
    resource: "Exhibitor",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createExhibitor(
    @common.Body() data: ExhibitorCreateInput
  ): Promise<Exhibitor> {
    return await this.service.createExhibitor({
      data: {
        ...data,

        booth: data.booth
          ? {
              connect: data.booth,
            }
          : undefined,
      },
      select: {
        booth: {
          select: {
            id: true,
          },
        },

        company: true,
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Exhibitor] })
  @ApiNestedQuery(ExhibitorFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Exhibitor",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async exhibitors(@common.Req() request: Request): Promise<Exhibitor[]> {
    const args = plainToClass(ExhibitorFindManyArgs, request.query);
    return this.service.exhibitors({
      ...args,
      select: {
        booth: {
          select: {
            id: true,
          },
        },

        company: true,
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Exhibitor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Exhibitor",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async exhibitor(
    @common.Param() params: ExhibitorWhereUniqueInput
  ): Promise<Exhibitor | null> {
    const result = await this.service.exhibitor({
      where: params,
      select: {
        booth: {
          select: {
            id: true,
          },
        },

        company: true,
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Exhibitor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Exhibitor",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateExhibitor(
    @common.Param() params: ExhibitorWhereUniqueInput,
    @common.Body() data: ExhibitorUpdateInput
  ): Promise<Exhibitor | null> {
    try {
      return await this.service.updateExhibitor({
        where: params,
        data: {
          ...data,

          booth: data.booth
            ? {
                connect: data.booth,
              }
            : undefined,
        },
        select: {
          booth: {
            select: {
              id: true,
            },
          },

          company: true,
          createdAt: true,
          email: true,
          id: true,
          name: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Exhibitor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Exhibitor",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteExhibitor(
    @common.Param() params: ExhibitorWhereUniqueInput
  ): Promise<Exhibitor | null> {
    try {
      return await this.service.deleteExhibitor({
        where: params,
        select: {
          booth: {
            select: {
              id: true,
            },
          },

          company: true,
          createdAt: true,
          email: true,
          id: true,
          name: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/booths")
  @ApiNestedQuery(BoothFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Booth",
    action: "read",
    possession: "any",
  })
  async findBooths(
    @common.Req() request: Request,
    @common.Param() params: ExhibitorWhereUniqueInput
  ): Promise<Booth[]> {
    const query = plainToClass(BoothFindManyArgs, request.query);
    const results = await this.service.findBooths(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,

        event: {
          select: {
            id: true,
          },
        },

        exhibitor: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/booths")
  @nestAccessControl.UseRoles({
    resource: "Exhibitor",
    action: "update",
    possession: "any",
  })
  async connectBooths(
    @common.Param() params: ExhibitorWhereUniqueInput,
    @common.Body() body: BoothWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      booths: {
        connect: body,
      },
    };
    await this.service.updateExhibitor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/booths")
  @nestAccessControl.UseRoles({
    resource: "Exhibitor",
    action: "update",
    possession: "any",
  })
  async updateBooths(
    @common.Param() params: ExhibitorWhereUniqueInput,
    @common.Body() body: BoothWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      booths: {
        set: body,
      },
    };
    await this.service.updateExhibitor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/booths")
  @nestAccessControl.UseRoles({
    resource: "Exhibitor",
    action: "update",
    possession: "any",
  })
  async disconnectBooths(
    @common.Param() params: ExhibitorWhereUniqueInput,
    @common.Body() body: BoothWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      booths: {
        disconnect: body,
      },
    };
    await this.service.updateExhibitor({
      where: params,
      data,
      select: { id: true },
    });
  }
}
