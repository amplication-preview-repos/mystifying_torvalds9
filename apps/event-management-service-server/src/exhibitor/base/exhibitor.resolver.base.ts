/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Exhibitor } from "./Exhibitor";
import { ExhibitorCountArgs } from "./ExhibitorCountArgs";
import { ExhibitorFindManyArgs } from "./ExhibitorFindManyArgs";
import { ExhibitorFindUniqueArgs } from "./ExhibitorFindUniqueArgs";
import { CreateExhibitorArgs } from "./CreateExhibitorArgs";
import { UpdateExhibitorArgs } from "./UpdateExhibitorArgs";
import { DeleteExhibitorArgs } from "./DeleteExhibitorArgs";
import { BoothFindManyArgs } from "../../booth/base/BoothFindManyArgs";
import { Booth } from "../../booth/base/Booth";
import { ExhibitorService } from "../exhibitor.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Exhibitor)
export class ExhibitorResolverBase {
  constructor(
    protected readonly service: ExhibitorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Exhibitor",
    action: "read",
    possession: "any",
  })
  async _exhibitorsMeta(
    @graphql.Args() args: ExhibitorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Exhibitor])
  @nestAccessControl.UseRoles({
    resource: "Exhibitor",
    action: "read",
    possession: "any",
  })
  async exhibitors(
    @graphql.Args() args: ExhibitorFindManyArgs
  ): Promise<Exhibitor[]> {
    return this.service.exhibitors(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Exhibitor, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Exhibitor",
    action: "read",
    possession: "own",
  })
  async exhibitor(
    @graphql.Args() args: ExhibitorFindUniqueArgs
  ): Promise<Exhibitor | null> {
    const result = await this.service.exhibitor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Exhibitor)
  @nestAccessControl.UseRoles({
    resource: "Exhibitor",
    action: "create",
    possession: "any",
  })
  async createExhibitor(
    @graphql.Args() args: CreateExhibitorArgs
  ): Promise<Exhibitor> {
    return await this.service.createExhibitor({
      ...args,
      data: {
        ...args.data,

        booth: args.data.booth
          ? {
              connect: args.data.booth,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Exhibitor)
  @nestAccessControl.UseRoles({
    resource: "Exhibitor",
    action: "update",
    possession: "any",
  })
  async updateExhibitor(
    @graphql.Args() args: UpdateExhibitorArgs
  ): Promise<Exhibitor | null> {
    try {
      return await this.service.updateExhibitor({
        ...args,
        data: {
          ...args.data,

          booth: args.data.booth
            ? {
                connect: args.data.booth,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Exhibitor)
  @nestAccessControl.UseRoles({
    resource: "Exhibitor",
    action: "delete",
    possession: "any",
  })
  async deleteExhibitor(
    @graphql.Args() args: DeleteExhibitorArgs
  ): Promise<Exhibitor | null> {
    try {
      return await this.service.deleteExhibitor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Booth], { name: "booths" })
  @nestAccessControl.UseRoles({
    resource: "Booth",
    action: "read",
    possession: "any",
  })
  async findBooths(
    @graphql.Parent() parent: Exhibitor,
    @graphql.Args() args: BoothFindManyArgs
  ): Promise<Booth[]> {
    const results = await this.service.findBooths(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Booth, {
    nullable: true,
    name: "booth",
  })
  @nestAccessControl.UseRoles({
    resource: "Booth",
    action: "read",
    possession: "any",
  })
  async getBooth(@graphql.Parent() parent: Exhibitor): Promise<Booth | null> {
    const result = await this.service.getBooth(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
